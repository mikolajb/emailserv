// Code generated by MockGen. DO NOT EDIT.
// Source: internal/emailclient/common.go

// Package emailclient is a generated GoMock package.
package emailclient

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEmailClient is a mock of EmailClient interface
type MockEmailClient struct {
	ctrl     *gomock.Controller
	recorder *MockEmailClientMockRecorder
}

// MockEmailClientMockRecorder is the mock recorder for MockEmailClient
type MockEmailClientMockRecorder struct {
	mock *MockEmailClient
}

// NewMockEmailClient creates a new mock instance
func NewMockEmailClient(ctrl *gomock.Controller) *MockEmailClient {
	mock := &MockEmailClient{ctrl: ctrl}
	mock.recorder = &MockEmailClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmailClient) EXPECT() *MockEmailClientMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockEmailClient) Send(arg0 context.Context, arg1, arg2, arg3 string, arg4 ...EmailOption) error {
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockEmailClientMockRecorder) Send(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEmailClient)(nil).Send), varargs...)
}

// ProviderName mocks base method
func (m *MockEmailClient) ProviderName() string {
	ret := m.ctrl.Call(m, "ProviderName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ProviderName indicates an expected call of ProviderName
func (mr *MockEmailClientMockRecorder) ProviderName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderName", reflect.TypeOf((*MockEmailClient)(nil).ProviderName))
}
